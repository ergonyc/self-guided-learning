[
  {
    "objectID": "resources-tools.html",
    "href": "resources-tools.html",
    "title": "Learning Resources - Tools",
    "section": "",
    "text": "A collection of resources for modern software and data tools, and frameworks\n\ncoding\n[python] [snakemake] [R]\n\n\nGit / Github\nGithub Flow\nbestpractices example from Utrecht University\n[collaborating on github] (https://rainsworth.github.io/intro-to-github/06_Collaboration.html)\n[intro-to-github] (https://rainsworth.github.io/intro-to-github)\n[github skills course] (https://skills.github.com/)\n[github for scientists] (https://milesmcbain.github.io/git_4_sci/)\n\n\ncharts and diagrams\n[Mermaid] (https://mermaid.js.org/#/)"
  },
  {
    "objectID": "software-installs.html",
    "href": "software-installs.html",
    "title": "Software Installs",
    "section": "",
    "text": "Information on how to install some commonly used software and tools.\n\n\nBash\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://carpentries.github.io/workshop-template/#shell-windows\n\n\nmacOS\nhttps://carpentries.github.io/workshop-template/#shell-macos\n\n\nLinux\nhttps://carpentries.github.io/workshop-template/#shell-linux\n\n\n\n\n\n\nConda (miniconda)\nInstall miniconda, not Anaconda.\nThis will also install Python, so if you wish to use a specific version of Python, you with want to specify that specific version when installing.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/windows.html\n\n\nmacOS\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/macos.html\n\n\nLinux\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html\n\n\n\n\n\n\nGit\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://carpentries.github.io/workshop-template/#git-windows\n\n\nmacOS\nhttps://carpentries.github.io/workshop-template/#git-macos\n\n\nLinux\nhttps://carpentries.github.io/workshop-template/#git-linux\n\n\n\n\n\n\nJupyter\nI recommend installing through conda. See the conda install above first if you need to install conda, then follow the instructions below.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://jupyter.org/install\n\n\nmacOS\nhttps://jupyter.org/install\n\n\nLinux\nhttps://jupyter.org/install\n\n\n\n\n\n\nPosit (formerly Rstudio)\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://posit.co/downloads/\n\n\nmacOS\nhttps://posit.co/downloads/\n\n\nLinux\nhttps://posit.co/downloads/\n\n\n\n\n\n\nPython\nPython will also come installed with conda (depending on the installer that is used, I think). Choose the Python version that most of your packages will need. If you are unsure, I would start with Python 3.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://realpython.com/installing-python/#how-to-install-from-the-full-installer\n\n\nmacOS\nhttps://realpython.com/installing-python/#step-1-download-the-official-installer\n\n\nLinux\nhttps://realpython.com/installing-python/#how-to-install-on-ubuntu-and-linux-mint\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\nmacOS\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\nLinux\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\n\n\n\n\nSnakemake\nI recommend installing this through conda. See the conda install above to first install conda, then follow the instructions below. I also recommend installing through mamba if possible.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html\n\n\nmacOS\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html\n\n\nLinux\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A resource for self-guided learning",
    "section": "",
    "text": "Computational biology approaches have become common in biological research, and an essential tool for many labs. Still, the complexity and ever changing nature of computational approaches can make learning to design, analyze, and interpret these data a daunting task.\nWhile not exhaustive, we’ve pulled together a set of self-guided learning resources for readers beginning their computional biology journey. Included are learning-oriented tutorials, task-oriented how-to guides, and information-oriented references. The formats vary from YouTube courses and MOOCs to website-based books and cheat-sheets.\n\nResource Descriptions\n\n\n\n\n\n\n\n\n\n\nSoftware Installs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDomain-Specific Series\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Resources\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "1-Reproducibility/series-introduction.html",
    "href": "1-Reproducibility/series-introduction.html",
    "title": "Series Introduction",
    "section": "",
    "text": "Goals and Topics\nWhile intended for those with prior coding experience (either in R, python, or bash), this first several sections of this training can be very helpful for beginners. The concepts introduced and covered here are meant to help one move toward computational reproducibility.\n\n\nCode of Conduct\nWe are dedicated to supporting a safe, productive, and harassment-free environment for everyone. Harassment includes offensive comments and behavior related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion, technology choices, sexual images, deliberate intimidation, stalking, or inappropriate or unwelcome sexual attention. All communication should be appropriate for a professional audience including people of many different backgrounds.\nIn general:\n\nBe kind to others.\nBe open, supportive, and constructive.\nDo not insult or put down others.\nBehave professionally.\nHarassment and sexist, racist, or exclusionary jokes are not appropriate and will not be tolerated.\n\nThank you for helping make this a welcoming, friendly community for all.\n\n\nSchedule\n\n\n\n\n\n\n\nSession\nLesson\n\n\n\n\nSession 1\nIntroduction to Bioinformatic Reproducibility\n\n\nSession 2\nGood Enough Practices\n\n\nSession 3\nPlan for Reproducibility\n\n\nSession 4\nTutorial: A Practical Introduction to Reproducible Computational Workflows\n\n\nSession 5\nSnakemake\n\n\n\n\n\nCitations\n\nTen simple rules for writing and sharing computational analyses in Jupyter Notebooks. Rule A, Birmingham A, Zuniga C, Altintas I, Huang SC, Knight R, Moshiri N, Nguyen MH, Rosenthal SB, Pérez F, Rose PW. PLoS Comput Biol. 2019 Jul 25;15(7):e1007007. doi: https://doi.org/10.1371/journal.pcbi.1007007\nReproducibility, Research Objects, and Reality. Gable C. 2016 Nov 24. https://www.slideshare.net/carolegoble/reproducibility-research-objects-and-reality-leiden-2016\nBaker M. 1,500 scientists lift the lid on reproducibility. Nature. 2016 May 26;533(7604):452-4. doi: 10.1038/533452a. PMID: 27225100.\nYang-Min Kim, Jean-Baptiste Poline, Guillaume Dumas, Experimenting with reproducibility: a case study of robustness in bioinformatics, GigaScience, Volume 7, Issue 7, July 2018, giy077, https://doi.org/10.1093/gigascience/giy077"
  },
  {
    "objectID": "learning-resources.html",
    "href": "learning-resources.html",
    "title": "Learning Resources",
    "section": "",
    "text": "Learning Resources are organized by SCIENCE, TOOLS, and FRAMEWORKS.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "domain-specific-series.html",
    "href": "domain-specific-series.html",
    "title": "Domain-Specific Series",
    "section": "",
    "text": "Each series is a set of tutorials focused on covering a topic more comprehensively than we are able to in a single office hours session.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Unix Shell\n\n\nLearn the basics of the Unix Shell\n\n\n\nChristopher Sifuentes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReproducibility\n\n\nLearn how to begin thinking and working toward computational reproducibilty.\n\n\n\nChristopher Sifuentes\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "0-The-Unix-Shell/installation.html",
    "href": "0-The-Unix-Shell/installation.html",
    "title": "Installation and Resources",
    "section": "",
    "text": "Software\nFor this series, you will need access to the Bash shell. This can be installed on Windows, Mac, and Linux. Follow the instructions at the link below.\nhttps://carpentries.github.io/workshop-template/#shell\n\n\nData\nThese data are zipped and should begin downloading once the link below is clicked.\nhttps://swcarpentry.github.io/shell-novice/data/data-shell.zip"
  },
  {
    "objectID": "0-The-Unix-Shell/navigating-files-and-directories.html",
    "href": "0-The-Unix-Shell/navigating-files-and-directories.html",
    "title": "Navigating Files and Directories",
    "section": "",
    "text": "File System\nThe file system manages and organizes our files and directories.\n\nFiles contain information, such as text or images.\nDirectories (what we often refer to as folders) contain files and other directories.\n\nWe can view this as a sort of “family tree” (or more like a root system), where there are “parent” and “child” directories. In the example file system below there are 5 sets of parent-child relationships.\n\n\n\n\n\n\n\nFigure 1: A representative file system.\n\n\nTwo of the 5 sets of parent-child relationships are shown below. Can you think of the other sets?\n\n\n\n\nRelationship 1\n\n\n\nflowchart TB\n  A[\"/\"] --> B[bin]\n  A --> C[data]\n  A --> D[Users]\n  A --> E[tmp]\n\n\n\n\n\n\n\n\n\nRelationship 2\n\n\n\nflowchart TB\n  A[Users] --> B[nelle]\n  A --> C[larry]\n\n\n\n\n\n\n\n\n\nFigure 2: Two of the five parent-child relationships in the file structure from Figure 1.\n\n\nThe file system also has a directionality, such that the directory that encompasses all other directories and files is at the top of the system and all other files or directories are below it. This top-most directory is called the root directory and is shown with the /.\n\n\n\nPaths\nAs you can see above, the directories, files, and subdirectories of a file system are connected. The route one would take from one directory or file to another is called a “path”. The path also describes the location of a file or directory within the file system. There are two types of paths:\n\nabsolute path – the path taken from the top-most directory (root, /), to the specified file or directory. The absolute path always starts with /.\nrelative path – the path taken from the present working direcotry to the specified file or directory. The relative path never starts with /.\n\nThe path to a few files is shown below.\n\n\n\n\n\n\n\n\nTarget\nAbsolute Path\nRelative Path (from the /bin directory)\n\n\n\n\nplot.R\n/bin/plot.R\nplot.R\n\n\nconda\n/bin/conda\nconda\n\n\n\nWhat is the absolute and relative path to the mouse.gtf file if we are in the /data directory?\n\n\n\n\n\n\nClick here for the answer!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTarget\nAbsolute Path\nRelative Path (from the /data directory)\n\n\n\n\nmouse.gtf\n/data/mouse.gtf\nmouse.gtf\n\n\n\n\n\n\n\n\n\nWorking Directory\nWhen we work in the command line, we are working in a specific location of the file system, called the “current working directory”.\nHow do we know where we are? We can use a command for that.\n\npwd command\n\npwd stands for print working directory\nprints out working directory location to the screen\n\nLet’s try it. Run the pwd command in your terminal.\n\nbash-3.2$ pwd\n/Users/csifuentes\nbash-3.2$\n\nIn the response above, the path of my working directory is /Users/csifuentes.\n\n\n\n\nListing files and directories\nWhen we’re using a terminal and in a specific directory, we often want to know which files and directories are in our current working directory. How can we do that?\n\n\n\n\n\n\nClick here for the answer!\n\n\n\n\n\nWe use the ls command.\nLet’s try it. Run the ls command in your terminal.\n\nbash-3.2$ ls\nApplications    Movies              RNASeq\nDesktop         Music               SoftwareCarpentryStuffs\nDocuments       Pictures            VirtualBox VMs\nDownloads       Public              miniconda3\nLibrary         RNASeqAnalysis.R    notes\nbash-3.2$\n\nThat didn’t work as we wanted it to.\nLet’s modify the the behavior of the ls command using the -F flag to list formats.\n\n(base) czimacos3304:~ csifuentes$ ls -F\nApplications/           Downloads/              Movies/                 VirtualBox VMs/         miniconda/              setup.sh\nCytoscapeConfiguration/ Dropbox-Uploader/       Music/                  bin/                    miniconda3/             single-cell-curation/\nDesktop/                EnsDb.Xtropicalis.v101/ Pictures/               course/                 notebooks/\nDocuments/              Library/                Public/                 igv/                    notes/\n\n\n\n\nIn the output, we see trailing symbols\n\n/ means the preceding is a directory\n\n@ means the preceding is a link\n\nfiles will have nothing preceding\n\n\n\n\nCleaning up\nAs we work in the terminal commands and outputs are printed to the screen. At times this becomes messy and it will take up the entire terminal screen, in time. We can clear the terminal using the clear commmand.\n\nclear command\n\nclear stands for clear :)\nclears the current terminal shell session\n\n\nBefore clearAfter clear\n\n\n\n(base) czimacos3304:~ csifuentes$ ls\nApplications            Downloads               Movies                  VirtualBox VMs          miniconda               setup.sh\nCytoscapeConfiguration  Dropbox-Uploader        Music                   bin                     miniconda3              single-cell-curation\nDesktop                 EnsDb.Xtropicalis.v101  Pictures                course                  notebooks\nDocuments               Library                 Public                  igv                     notes\n(base) czimacos3304:~ csifuentes$ ks\nbash: ks: command not found\n(base) czimacos3304:~ csifuentes$ ls\nApplications            Downloads               Movies                  VirtualBox VMs          miniconda               setup.sh\nCytoscapeConfiguration  Dropbox-Uploader        Music                   bin                     miniconda3              single-cell-curation\nDesktop                 EnsDb.Xtropicalis.v101  Pictures                course                  notebooks\nDocuments               Library                 Public                  igv                     notes\n(base) czimacos3304:~ csifuentes$ ls -F\nApplications/           Downloads/              Movies/                 VirtualBox VMs/         miniconda/              setup.sh\nCytoscapeConfiguration/ Dropbox-Uploader/       Music/                  bin/                    miniconda3/             single-cell-curation/\nDesktop/                EnsDb.Xtropicalis.v101/ Pictures/               course/                 notebooks/\nDocuments/              Library/                Public/                 igv/                    notes/\n(base) czimacos3304:~ csifuentes$ clear\n\n\n\n\n(base) czimacos3304:~ csifuentes$ \n\n\n\n\n\n\n\n\nHistory\nNow we have a cleared terminal screen – nice and clean. But what if we needed to know some of the commands we ran previously? Don’t worry, the terminal keeps the command history.\n\nhistory command\n\nhistory stands for history\nprints the last x number of commands that were run\n\n\n(base) czimacos3304:~ csifuentes$ history\n   16  pwd\n   17  ls\n   18  ks\n   19  ls\n   20  ls -F\n   21  clear\n   22  history\n(base) czimacos3304:~ csifuentes$ \n\n\n\n\n\n\n\nTip\n\n\n\nWe can see the most recent command by tapping the “up arrow” on our keyboard. This can be very helpful when we want to run the same command (or edit the command slightly) but do not want to retype the entire command.\n\n\n\n\n\n\nExploring other directories\n\nList in other directories\nSo far we have only used ls to list items in our current working directory. Let’s see take a look at other directories. We can do this by passing a directory as the target of the ls command.\nUsing the test data, list the files in data-shell and data/shell/creatures.\n\n\nCreating new directories\n\n\nMoving to new directories"
  },
  {
    "objectID": "0-The-Unix-Shell/working-with-files-and-directories.html",
    "href": "0-The-Unix-Shell/working-with-files-and-directories.html",
    "title": "Working with Files and Directories",
    "section": "",
    "text": "File System\nThe file system manages and organizes our files and directories.\n\nFiles contain information, such as text or images.\nDirectories (what we often refer to as folders) contain files and other directories.\n\n\n\n\n\n\n\n\nFigure 1: A representative file system\n\n\n\n\n\nDirectories and paths\nAs we saw above in Figure 1., the file system is a set of directories and files. We can think of\nWhen we work in the command line, we are working in a specific location of the file system, called the “working directory”.\nHow do we know where we are? We can use a command for that.\n\npwd command\n\npwd stands for print working directory\nprints out working directory location to the screen\n\n\n\n\n\n\n\nTip\n\n\n\nThe location within the file system is also called path, because it tells that path that can be taken from the top-most directory to the specified location.\n\n\nLet’s try it. Run the pwd command in your terminal.\n\nbash-3.2$ pwd\n/Users/csifuentes\nbash-3.2$\n\nIn the response above, the path of my working directory is /Users/csifuentes.\n\n\n\n\nStructure\nBelow is a schematic representing the file system for three users: Imhotep, Larry, and Nelle.\nWhat do you think the user paths will be?\n\n\n\n\n\n\n\nFigure 2: The file system structure for several user directories.\n\n\n\n\n\n\n\n\nWhat is structure for each users directory? Click here for the answer!\n\n\n\n\n\nFor Imhotep: /Users/imhotep\nFor Larry: /Users/larry\nFor Nelle: /Users/nelle\n\n\n\nUsing the examples above, let’s break down the path structures. If we look at directories, we see there are\n\n\n\n\n\n\n\nDirectory\n\n\n\n\n\nTop level\n/ or root\n\n\nNext one down\nbin, data, Users, and tmp\n\n\nLowest level (home directories in this case)\nimhotep, larry, and nelle\n\n\n\n\n\n\nListing files and directories\nWhen we’re using a terminal and in a specific directory, we often want to know which files and directories are in our currint working directory. How can we do that?\n\n\n\n\n\n\nClick here for the answer!\n\n\n\n\n\nWe use the ls command.\nLet’s try it. Run the ls command in your terminal.\n\nbash-3.2$ ls\nApplications    Movies              RNASeq\nDesktop         Music               SoftwareCarpentryStuffs\nDocuments       Pictures            VirtualBox VMs\nDownloads       Public              miniconda3\nLibrary         RNASeqAnalysis.R    notes\nbash-3.2$\n\nThat didn’t work right Let’s modify the the behavior of the ls command using the -F flag to list formats.\n\n(base) czimacos3304:~ csifuentes$ ls -F\nApplications/           Downloads/              Movies/                 VirtualBox VMs/         miniconda/              setup.sh\nCytoscapeConfiguration/ Dropbox-Uploader/       Music/                  bin/                    miniconda3/             single-cell-curation/\nDesktop/                EnsDb.Xtropicalis.v101/ Pictures/               course/                 notebooks/\nDocuments/              Library/                Public/                 igv/                    notes/\n\n\n\n\nIn the output, we see trailing symbols\n\n/ means the preceding is a directory\n\n@ means the preceding is a link\n\nfiles will have nothing preceding\n\n\n\n\nCleaning up\nAs we work in the terminal commands and outputs are printed to the screen. At times this becomes messy and it will take up the entire terminal screen, in time. We can clear the terminal using the clear commmand.\n\nclear command\n\nclear stands for clear :)\nclears the current terminal shell session\n\n\nBefore clearAfter clear\n\n\n\n(base) czimacos3304:~ csifuentes$ ls\nApplications            Downloads               Movies                  VirtualBox VMs          miniconda               setup.sh\nCytoscapeConfiguration  Dropbox-Uploader        Music                   bin                     miniconda3              single-cell-curation\nDesktop                 EnsDb.Xtropicalis.v101  Pictures                course                  notebooks\nDocuments               Library                 Public                  igv                     notes\n(base) czimacos3304:~ csifuentes$ ks\nbash: ks: command not found\n(base) czimacos3304:~ csifuentes$ ls\nApplications            Downloads               Movies                  VirtualBox VMs          miniconda               setup.sh\nCytoscapeConfiguration  Dropbox-Uploader        Music                   bin                     miniconda3              single-cell-curation\nDesktop                 EnsDb.Xtropicalis.v101  Pictures                course                  notebooks\nDocuments               Library                 Public                  igv                     notes\n(base) czimacos3304:~ csifuentes$ ls -F\nApplications/           Downloads/              Movies/                 VirtualBox VMs/         miniconda/              setup.sh\nCytoscapeConfiguration/ Dropbox-Uploader/       Music/                  bin/                    miniconda3/             single-cell-curation/\nDesktop/                EnsDb.Xtropicalis.v101/ Pictures/               course/                 notebooks/\nDocuments/              Library/                Public/                 igv/                    notes/\n(base) czimacos3304:~ csifuentes$ clear\n\n\n\n\n(base) czimacos3304:~ csifuentes$ \n\n\n\n\n\n\n\n\nHistory\nNow we have a cleared terminal screen – nice and clean. But what if we needed to know some of the commands we ran previously? Don’t worry, the terminal keeps the command history.\n\nhistory command\n\nhistory stands for history\nprints the last x number of commands that were run\n\n\n(base) czimacos3304:~ csifuentes$ history\n   16  pwd\n   17  ls\n   18  ks\n   19  ls\n   20  ls -F\n   21  clear\n   22  history\n(base) czimacos3304:~ csifuentes$ \n\n\n\n\n\n\n\nTip\n\n\n\nWe can see the most recent command by tapping the “up arrow” on our keyboard. This can be very helpful when we want to run the same command (or edit the command slightly) but do not want to retype the entire command.\n\n\n\n\n\n\nCommand syntax\nShell commands follow a general syntax.\ncommand option argument\n\ncommand is the main command\noption modifies the behavior of the command\nargument the source and/or target of the command\n\nLet’s take a look at a few examples:\n\n\n\nCommand\nOption\nArgument\n\n\n\n\nls\n-F\n/\n\n\nmv\n-i\n/Users/path/file /other/directory\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nOptions use either - or -- to signal their usage.\nOptions are sometimes called flags.\nArguments are sometimes called parameters.\nDepending on the command, arguments can be either a target (as in the ls command) or both a source and target (as in the mv command)\n\n\n\n\nCase matters\nWhat happens if we run the same command, but change the case? Let’s try with an example. We’ll use the ls command and the size option, s, which lists the directories and files, but add their block sizes alongside.\nFirst, let’s run the command ls -s.\n\n(base) czimacos3304:~ csifuentes$ ls -s\ntotal 8\n0 Applications                  0 Dropbox-Uploader              0 Pictures                      0 igv                           8 setup.sh\n0 CytoscapeConfiguration        0 EnsDb.Xtropicalis.v101        0 Public                        0 miniconda                     0 single-cell-curation\n0 Desktop                       0 Library                       0 VirtualBox VMs                0 miniconda3\n0 Documents                     0 Movies                        0 bin                           0 notebooks\n0 Downloads                     0 Music                         0 course                        0 notes\n(base) czimacos3304:~ csifuentes$ \n\nNow let’s do the same, but with a capital s, ls -S.\n\n(base) czimacos3304:~ csifuentes$ ls -S\nDownloads               CytoscapeConfiguration  Dropbox-Uploader        igv                     Music                   miniconda\nLibrary                 course                  EnsDb.Xtropicalis.v101  Applications            Public                  notes\nDocuments               miniconda3              Movies                  notebooks               VirtualBox VMs\nsetup.sh                single-cell-curation    Pictures                Desktop                 bin\n\nWe get a very different output. In the output above, we have the files/directories sorted by size (largest) file first.\n\n\nGetting help\nCommand usage is not always intuitive. Additionally, we’re often not aware of all the options/flags that can be used with a particular command. If you need help with how to use a command, you can try the following (depending on the command).\n\n\n\n\n\n\n\n\nMethod of getting help\nDescription\nExample\n\n\n\n\n--help or -h option/flag\nDisplays help menu for the command/program\nls --help\n\n\nman command\nDisplays the manual for the command/program in-depth\nman ls\n\n\n\n\n\n\n\n\n\n\n(a) Using the --help flag\n\n\n\n\n\n\n\n\n\n(b) Using the man command\n\n\n\n\nFigure 3: Different ways to interact with a computer\n\n\n\n\n\n\nUseful ls flags\nThere are A LOT of ls options/flags. A few quite useful ones are shows below.\n\n\n\n\n\n\n\nFlag\nDescription\n\n\n\n\n-l\nReturns the results in a long format, which provides information about\n\nthe item type (- for file, d for directory, l for link)\nitem permissions\nthenumber of links or files inside that item\nthe item owner\nthe item group\nthe time the item was created\nitem size\nitem name\n\n\n\n-h\nReturns the results with a human-readible size value\n\n\n\n\n\n\n\n\n\n\nFigure 4: Using the -lh options/flags.\n\n\nAbove the results are now listed, one item per line, in alphabetical order, and the additional information provided when using the -l flag/option. Using the -h flag/option, the sizes are much easier to read (in bytes or kilobytes, megabytes, and gigabytes) as well.\n\n\n\n\n\n\nNote\n\n\n\nMultiple options or flags can be used at the same time by simply putting them one after the other, as above.\n\n\n\n\n\nExploring other directories\n\n\nCut, Sort, Join, Grep"
  },
  {
    "objectID": "0-The-Unix-Shell/series-introduction.html",
    "href": "0-The-Unix-Shell/series-introduction.html",
    "title": "Series Introduction",
    "section": "",
    "text": "Goals and Topics\nThis training series is intended for absolute beginners and focused on the basic usage of the Bash Shell. Concepts introduced in these sessions are foundational to the application of computational approaches and will enable more powerful and reproducible research.\nBy the end of the series, you should be able to\n\ndescribe the Unix file system structure\nnavigate the Unix file system from the command line\ncreate, view, and manipulate files and directories\nchain bash shell commands together\ncreate a basic Bash shell script to automate tasks\n\n\n\nCode of Conduct\nWe are dedicated to supporting a safe, productive, and harassment-free environment for everyone. Harassment includes offensive comments and behavior related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion, technology choices, sexual images, deliberate intimidation, stalking, or inappropriate or unwelcome sexual attention. All communication should be appropriate for a professional audience including people of many different backgrounds.\nIn general:\n\nBe kind to others.\nBe open, supportive, and constructive.\nDo not insult or put down others.\nBehave professionally.\nHarassment and sexist, racist, or exclusionary jokes are not appropriate and will not be tolerated.\n\nThank you for helping make this a welcoming, friendly community for all.\n\n\nSchedule\n\n\n\n\n\n\n\nSession\nLesson\n\n\n\n\nSession 1\n\nIntroducing the Shell\nNavigating Files and Directories\n\n\n\nSession 2\n\nWorking with Files and Directories\nPipes and Filters\n\n\n\nSession 3\n\nLoops\nBash Scripting\n\n\n\nSession 4\n\nFinding Things\n\n\n\n\n\n\nCitations\n\nGabriel A. Devenyi (Ed.), Gerard Capes (Ed.), Colin Morris (Ed.), Will Pitchers (Ed.), Greg Wilson, Gerard Capes, Gabriel A. Devenyi, Christina Koch, Raniere Silva, Ashwin Srinath, … Vikram Chhatre. (2019, July). swcarpentry/shell-novice: Software Carpentry: the UNIX shell, June 2019 (Version v2019.06.1). Zenodo. http://doi.org/10.5281/zenodo.3266823\nComputational Foundations Workshop. (n.d.). Retrieved December 7, 2022, from https://umich-brcf-bioinf.github.io/2022-10-31-umich-computational-foundations/html/index.html\n\nNote: This series has been adapted from the Carpentries course entitles “The Unix Shell” [1] as well as the “Computational Foundations Workshop” [2], created by the University of Michigan Bioinformatics Core Workshop Team"
  },
  {
    "objectID": "0-The-Unix-Shell/introducing-the-shell.html",
    "href": "0-The-Unix-Shell/introducing-the-shell.html",
    "title": "Introducing the Shell",
    "section": "",
    "text": "What is the shell?\nThe Shell is one of the ways we can interact with a computer. It is a program that allows users to tell the computer what to do, to give the computer a “command”, and is commonly used through a command line interface (CLI).\nAnother, perhaps more common way we tell the computer what to do is through the use of a graphical user interface (GUI). This usually involves a “point and click” approach.\n\n\n\n\n\n\n\n(a) Command Line Interface (CLI)\n\n\n\n\n\n\n\n(b) Graphical User Interface (GUI)\n\n\n\n\nFigure 1: Different ways to interact with a computer\n\n\n\n\n\nWhy use the shell?\nIsn’t pointing and clicking easier?\n\nThought experiment\nFor example, let’s say that we need to take the third line of a file and put it into a single new file. This is easy to do with a GUI and requires just 4 steps:\n\nOpen the original file.\nCopy from original file\nPaste to the new file.\nClose each file.\n\nWhat if we make it more complicated?\n\nDo this with 1000 files?\nEach file is in it’s own directory?\n\nTake a look below to see the process for GUI and CLI.\n\nGUI StepsCLI Code\n\n\n1. Open the original file.\n2. Copy from original file\n3. Paste to the new file.\n4. Close each file.\n5. Navigate to another file.\n6. Repeat steps 2 through 5 999 times until you are done.\n\n\nfor i in */*.txt;\ndo;\n    sed -n3 '3p' $i > new.txt;\ndone\n\n\n\nFor this task, the GUI was tedious, time-consuming, and error-prone while the CLI was a single-command, quick, and relatively error proof.\n\n\n\n\nUsing the shell\nLet’s start using the shell. Open the shell (terminal) on your computer.\n\nRunning our first command\nOnce we open our terminal, the $ shows us that shell is ready for input.\n\nls commmand\n\nls stands for list\nlists objects (files, directories, etc.) in a location\n\nIn terminal, type ls and press enter/return.\n\n(base) czimacos3304:~ csifuentes$ ls\nApplications            Downloads               Movies                  VirtualBox VMs          miniconda               setup.sh\nCytoscapeConfiguration  Dropbox-Uploader        Music                   bin                     miniconda3              single-cell-curation\nDesktop                 EnsDb.Xtropicalis.v101  Pictures                course                  notebooks\nDocuments               Library                 Public                  igv                     notes\n(base) czimacos3304:~ csifuentes$ \n\nEverything that is in your home directory is listed, alphabetically.\n\n\n\n\n\n\nTip\n\n\n\nUpon successful completion of the ls command, the $ prompt is displayed, signalling that the shell is ready again.\n\n\n\n\n\nOur first error\nThis is great, but what if we make a mistake? What happens then?\nThe shell provides (usually) helpful and informative error messages. Let’s test this by typing ks into the terminal instead of ls.\n\n(base) czimacos3304:~ csifuentes$ ks\nbash: ks: command not found\n(base) czimacos3304:~ csifuentes$ \n\nThe shell returned an error bash: ks: command not found. In this instance, it tells you that ks is not a command, or at the very least that it cannot find that command.\nWe’ll learn more about commands and command structure soon, but first let’s learn about the filesystem.\n\n\n\n\nCommand syntax\nShell commands follow a general syntax.\ncommand option argument\n\ncommand is the main command\noption modifies the behavior of the command\nargument the source and/or target of the command\n\nLet’s take a look at a few examples:\n\n\n\n\n\n\n\n\nCommand\nOption\nArgument\n\n\n\n\nls\n-F\n/\n\n\nmv\n-i\n/Users/path/file /other/directory\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nOptions use either - or -- to signal their usage.\nOptions are sometimes called flags.\nArguments are sometimes called parameters.\nDepending on the command, arguments can be either a target (as in the ls command) or both a source and target (as in the mv command)\n\n\n\n\nCase matters\nWhat happens if we run the same command, but change the case? Let’s try with an example. We’ll use the ls command and the size option, s, which lists the directories and files, but add their block sizes alongside.\nFirst, let’s run the command ls -s.\n\n(base) czimacos3304:~ csifuentes$ ls -s\ntotal 8\n0 Applications                  0 Dropbox-Uploader              0 Pictures                      0 igv                           8 setup.sh\n0 CytoscapeConfiguration        0 EnsDb.Xtropicalis.v101        0 Public                        0 miniconda                     0 single-cell-curation\n0 Desktop                       0 Library                       0 VirtualBox VMs                0 miniconda3\n0 Documents                     0 Movies                        0 bin                           0 notebooks\n0 Downloads                     0 Music                         0 course                        0 notes\n(base) czimacos3304:~ csifuentes$ \n\nNow let’s do the same, but with a capital s, ls -S.\n\n(base) czimacos3304:~ csifuentes$ ls -S\nDownloads               CytoscapeConfiguration  Dropbox-Uploader        igv                     Music                   miniconda\nLibrary                 course                  EnsDb.Xtropicalis.v101  Applications            Public                  notes\nDocuments               miniconda3              Movies                  notebooks               VirtualBox VMs\nsetup.sh                single-cell-curation    Pictures                Desktop                 bin\n\nWe get a very different output. In the output above, we have the files/directories sorted by size (largest) file first.\n\n\nGetting help\nCommand usage is not always intuitive. Additionally, we’re often not aware of all the options/flags that can be used with a particular command. If you need help with how to use a command, you can try the following (depending on the command).\n\n\n\n\n\n\n\n\nMethod of getting help\nDescription\nExample\n\n\n\n\n--help or -h option/flag\nDisplays help menu for the command/program\nls --help\n\n\nman command\nDisplays the manual for the command/program in-depth\nman ls\n\n\n\n\n\n\n\n\n\n\n(a) Using the --help flag\n\n\n\n\n\n\n\n\n\n(b) Using the man command\n\n\n\n\nFigure 2: Different ways to interact with a computer\n\n\n\n\n\n\nUseful ls flags\nThere are A LOT of ls options/flags. A few quite useful ones are shows below.\n\n\n\n\n\n\n\nFlag\nDescription\n\n\n\n\n-l\nReturns the results in a long format, which provides information about\n\nthe item type (- for file, d for directory, l for link)\nitem permissions\nthenumber of links or files inside that item\nthe item owner\nthe item group\nthe time the item was created\nitem size\nitem name\n\n\n\n-h\nReturns the results with a human-readible size value\n\n\n\n\n\n\n\n\n\n\nFigure 3: Using the -lh options/flags.\n\n\nAbove the results are now listed, one item per line, in alphabetical order, and the additional information provided when using the -l flag/option. Using the -h flag/option, the sizes are much easier to read (in bytes or kilobytes, megabytes, and gigabytes) as well.\n\n\n\n\n\n\nNote\n\n\n\nMultiple options or flags can be used at the same time by simply putting them one after the other, as above."
  },
  {
    "objectID": "resources-science.html",
    "href": "resources-science.html",
    "title": "Learning Resources - Tools",
    "section": "",
    "text": "A collection of self-guided learning resources for modern software and data tools.\n\nMODERN SCIENCE NOTEBOOK 101\n\n\nGit / Github\nGithub Flow\nbestpractices example from Utrecht University\n[collaborating on github] (https://rainsworth.github.io/intro-to-github/06_Collaboration.html)\n[intro-to-github] (https://rainsworth.github.io/intro-to-github) [github skills course] (https://skills.github.com/)\n\n\ncharts and diagrams\n[Mermaid] (https://mermaid.js.org/#/)"
  },
  {
    "objectID": "learning-resources-frameworks.html",
    "href": "learning-resources-frameworks.html",
    "title": "Learning Resources",
    "section": "",
    "text": "A collection of self-guided learning resources created by others.\n\nLanguages and Programming\n\n\nPython\n\nHow to Learn to Code – A 5 minute video on how to approach programming, either learning theory, soliciting advice, OR (hint hint) problem solving.\nPython Course: Programming for Everybody (Getting Started with Python) – A terrific free course by the University of Michigan to learn the basics of programming in Python, with no prerequisites.\nBiopython Course: Bioinformatics with Biopython – A 1-hour YouTube course that covers some common uses of biopython. Biopython is a set of tools for biological computaiton that is written in Python. It has many useful functions for processing and working with sequence files.\nPython Cheatsheet – A quick-reference, cheatsheet-styled website for common tasks/tricks in python. Helpful for beginners and power-users.\n\n\n\nR\n\nR Course: swirl - learn R, in R – Super cool way to learn R programming and datascience interactively, at your own pace, and in the R console. There is a library of courses you can learn from.\nR Course: Data Analysis using R – A comprehensive and high quality YouTube based course by Dr. Danny Arends (with videos, access to lectures, assignments, and answers) for those within minimal to no previous programming experience. This might be one of the best courses available.\nR for Data Science – A website for the “R for Data Science” book, with a focus on how to perform data science with R, from data exploration (visualization, workflow, working with tidy data, scripting), wrangling, modeling, and communicating results (R markdown).\nR Cheatsheet – A quick-reference cheatsheet for R.\n\n\n\nUnix and Bash\n\nUnix Book: Unix Workbench – A website (book) for those new to Unix-like operating systems and working at the command-line. This book covers unix and command-line basics, as well as introductory bash programming concepts (math, variables, loops, input/output, arrays, pbraces, functions), and writing programs. As a nice bonus, it also gives brief introductions to Git, GitHub, and Cloud Computing.\nBash Reference: bash-guide – Common commands, with some minimal examples.\n\n\n\nJulia\n\nJulia Course: Zero-to-Hero Julia Workshop – Two day intensive, recorded (YouTube), workshop on the programming language, Julia. This workshop is intended for beginners. Julia is a programming language designed for scientific computing, to be quick, but also readable and high-level like Python.\n\n\n\nPlotting and Visualizations\n\n\nWith Python\n\nIntroduction to Data Visualization in Python – A very simple introduction to data visualization in Python.\nPython Data Visualization Tutorials – A set of tutorials for plotting with Python in Pandas, matplotlib, seaborn, and boken (interactive visualizations).\nInteractive Visualizations with Plotly in Python – An introduction, for beginners, to interactively plotting in Python using Plotly.\n\n\n\nWith R\n\nData Visualization with R – A Web-based book focused on data visualization and plotting with R. It covers data importing, cleaning, using plotting libraries (ggplot2), customizing plots, interactive visualization, and more.\nShiny Cheatsheet – A quick reference cheatsheet for creating interactive web apps with shiny.\n\n\n\nSingle-Cell Analyses\n\n\nSingle-Cell RNA-seq\n\nscRNA-seq Analysis Tutorial: Analysis of Single-Cell RNA-seq Data – A continuously updated and comprehensive single-cell RNA-seq analysis tutorial/course, taught primarily in R. This course begins with a discussion of single-cell methods, experimental design, and data processing and ends with single-cell dataset integration. It uses primarily Seurat, but also covers other tools for analysis and integration.\nscRNA-seq Tutorial: Single-cell best practices – A very good tutorial on the best practices in single-cell RNA-seq analysis, taught primarily in Python. This course starts with pre-processing and QC, and ends with a brief overview on CITE-seq, immune repertoire, and integration. The paper that this course was originally based on.\nSingle-Cell Genomics Workshop: Single-Cell Genomics Day – A yearly workshop by the Satija lab (leaders in the world of single-cell analysis) on various single-cell genomics analysis topics/methods. In addition to a “recent and future advances” session, the workshop covers spatial and temporal analysis, epigenomic analysis, genotype-phenotype landscapes, and multimodal analyses.\nscRNA-seq Best Practices Pipeline: nf-core/scrnaseq – A best-practices pipline for processing 10x genomics single-cell data using Nextflow, a workflow management tool that provides improved computational metics and reproducibility.\nCurated database of single cell studies – A manually curated database of over 1800 single-cell studies, dating back to 2002. The doi, number of cells, organism, tissue, and experimental method are included, as well as other useful information.\n\n\n\nSingle-Cell ATAC-seq\n\nscATAC-seq Lectues: Best practices for ATAC-seq – A set of lectures from Ming Tang that cover the scATAC-seq experimental method, pre-processing and QC, and anlysis and integration.\nscATAC-seq Review Paper: Single-cell ATAC sequencing analysis: From data preprocessing to hypothesis generation – A helpful review of scATAC-seq technologies and analysis software.\n\n\n\nProteomics\n[Mass-Spec Based Proteomics Aanalysis Tutorial]\nBest practices for mass-spec-based biomarker discovery – A high-level paper overview of best practices for mass-spectrometry-based biomarker discovery.\n\n\nImaging Analysis\n[Segmentation]\n\n\nWorkflow Managers\n[Nexflow]\n[Snakemake]\n[Galaxy]\n\n\nOpen Science & Reproducibility\n[Posit]\nPosit Cheatsheets – An amazing list of cheatsheets for eveyrthing rmarkdown, shiny, reticulate, stringr, readr, sparkly, tidyr, dplyr, ggplot2, and more.\n[Jupyterlab and Notebooks]\n\n\nCloud Computing\n[]\n[]\n[]\n\n\nML/AI\n\n\nGeneral Bioinformatics\nBioinformatics Course: Bioinformatics for Plant and Animal Sciences – A quality YouTube based course by Dr. Danny Arends (with videos, access to lectures, assignments, and answers) on bioinformatics. This course covers biological topics (genetics, molecular biology, metabolism, homology/phylogeny, etc.), as well as computational and analysis topics (transcriptomics, R, stats) and ends with learning how to create an R package.\nRosalind – a great resource to learn about bioinformatics (including algorithms) and programming by problem-solving.\n\n\nStatistics\nIntroductory Stats Course: Introduction to Experimental Design and Hypothesis Testing – A beginner-friendly set of resources (slides, code) from an online workshop by the Gladstone Institutes to work though. The resources cover concepts underlying hypothesis testing.\nIntermediate Course: Statistics of Enrichment Analyses Methods – A course designed for those familiar with basic statistics and experimental design concepts, an understanding of high-throughput analyses (RNA-seq, Mass Spec, etc.), and a working knowledge of R."
  },
  {
    "objectID": "learning-resources-science.html",
    "href": "learning-resources-science.html",
    "title": "Learning Resources",
    "section": "",
    "text": "A collection of self-guided learning resources created by others.\n\nLanguages and Programming\n\n\nPython\n\nHow to Learn to Code – A 5 minute video on how to approach programming, either learning theory, soliciting advice, OR (hint hint) problem solving.\nPython Course: Programming for Everybody (Getting Started with Python) – A terrific free course by the University of Michigan to learn the basics of programming in Python, with no prerequisites.\nBiopython Course: Bioinformatics with Biopython – A 1-hour YouTube course that covers some common uses of biopython. Biopython is a set of tools for biological computaiton that is written in Python. It has many useful functions for processing and working with sequence files.\nPython Cheatsheet – A quick-reference, cheatsheet-styled website for common tasks/tricks in python. Helpful for beginners and power-users.\n\n\n\nR\n\nR Course: swirl - learn R, in R – Super cool way to learn R programming and datascience interactively, at your own pace, and in the R console. There is a library of courses you can learn from.\nR Course: Data Analysis using R – A comprehensive and high quality YouTube based course by Dr. Danny Arends (with videos, access to lectures, assignments, and answers) for those within minimal to no previous programming experience. This might be one of the best courses available.\nR for Data Science – A website for the “R for Data Science” book, with a focus on how to perform data science with R, from data exploration (visualization, workflow, working with tidy data, scripting), wrangling, modeling, and communicating results (R markdown).\nR Cheatsheet – A quick-reference cheatsheet for R.\n\n\n\nUnix and Bash\n\nUnix Book: Unix Workbench – A website (book) for those new to Unix-like operating systems and working at the command-line. This book covers unix and command-line basics, as well as introductory bash programming concepts (math, variables, loops, input/output, arrays, pbraces, functions), and writing programs. As a nice bonus, it also gives brief introductions to Git, GitHub, and Cloud Computing.\nBash Reference: bash-guide – Common commands, with some minimal examples.\n\n\n\nJulia\n\nJulia Course: Zero-to-Hero Julia Workshop – Two day intensive, recorded (YouTube), workshop on the programming language, Julia. This workshop is intended for beginners. Julia is a programming language designed for scientific computing, to be quick, but also readable and high-level like Python.\n\n\n\nPlotting and Visualizations\n\n\nWith Python\n\nIntroduction to Data Visualization in Python – A very simple introduction to data visualization in Python.\nPython Data Visualization Tutorials – A set of tutorials for plotting with Python in Pandas, matplotlib, seaborn, and boken (interactive visualizations).\nInteractive Visualizations with Plotly in Python – An introduction, for beginners, to interactively plotting in Python using Plotly.\n\n\n\nWith R\n\nData Visualization with R – A Web-based book focused on data visualization and plotting with R. It covers data importing, cleaning, using plotting libraries (ggplot2), customizing plots, interactive visualization, and more.\nShiny Cheatsheet – A quick reference cheatsheet for creating interactive web apps with shiny.\n\n\n\nSingle-Cell Analyses\n\n\nSingle-Cell RNA-seq\n\nscRNA-seq Analysis Tutorial: Analysis of Single-Cell RNA-seq Data – A continuously updated and comprehensive single-cell RNA-seq analysis tutorial/course, taught primarily in R. This course begins with a discussion of single-cell methods, experimental design, and data processing and ends with single-cell dataset integration. It uses primarily Seurat, but also covers other tools for analysis and integration.\nscRNA-seq Tutorial: Single-cell best practices – A very good tutorial on the best practices in single-cell RNA-seq analysis, taught primarily in Python. This course starts with pre-processing and QC, and ends with a brief overview on CITE-seq, immune repertoire, and integration. The paper that this course was originally based on.\nSingle-Cell Genomics Workshop: Single-Cell Genomics Day – A yearly workshop by the Satija lab (leaders in the world of single-cell analysis) on various single-cell genomics analysis topics/methods. In addition to a “recent and future advances” session, the workshop covers spatial and temporal analysis, epigenomic analysis, genotype-phenotype landscapes, and multimodal analyses.\nscRNA-seq Best Practices Pipeline: nf-core/scrnaseq – A best-practices pipline for processing 10x genomics single-cell data using Nextflow, a workflow management tool that provides improved computational metics and reproducibility.\nCurated database of single cell studies – A manually curated database of over 1800 single-cell studies, dating back to 2002. The doi, number of cells, organism, tissue, and experimental method are included, as well as other useful information.\n\n\n\nSingle-Cell ATAC-seq\n\nscATAC-seq Lectues: Best practices for ATAC-seq – A set of lectures from Ming Tang that cover the scATAC-seq experimental method, pre-processing and QC, and anlysis and integration.\nscATAC-seq Review Paper: Single-cell ATAC sequencing analysis: From data preprocessing to hypothesis generation – A helpful review of scATAC-seq technologies and analysis software.\n\n\n\nProteomics\n[Mass-Spec Based Proteomics Aanalysis Tutorial]\nBest practices for mass-spec-based biomarker discovery – A high-level paper overview of best practices for mass-spectrometry-based biomarker discovery.\n\n\nImaging Analysis\n[Segmentation]\n\n\nWorkflow Managers\n[Nexflow]\n[Snakemake]\n[Galaxy]\n\n\nOpen Science & Reproducibility\n[Posit]\nPosit Cheatsheets – An amazing list of cheatsheets for eveyrthing rmarkdown, shiny, reticulate, stringr, readr, sparkly, tidyr, dplyr, ggplot2, and more.\n[Jupyterlab and Notebooks]\n\n\nCloud Computing\n[]\n[]\n[]\n\n\nML/AI\n\n\nGeneral Bioinformatics\nBioinformatics Course: Bioinformatics for Plant and Animal Sciences – A quality YouTube based course by Dr. Danny Arends (with videos, access to lectures, assignments, and answers) on bioinformatics. This course covers biological topics (genetics, molecular biology, metabolism, homology/phylogeny, etc.), as well as computational and analysis topics (transcriptomics, R, stats) and ends with learning how to create an R package.\nRosalind – a great resource to learn about bioinformatics (including algorithms) and programming by problem-solving.\n\n\nStatistics\nIntroductory Stats Course: Introduction to Experimental Design and Hypothesis Testing – A beginner-friendly set of resources (slides, code) from an online workshop by the Gladstone Institutes to work though. The resources cover concepts underlying hypothesis testing.\nIntermediate Course: Statistics of Enrichment Analyses Methods – A course designed for those familiar with basic statistics and experimental design concepts, an understanding of high-throughput analyses (RNA-seq, Mass Spec, etc.), and a working knowledge of R."
  },
  {
    "objectID": "learning-resources-tools.html",
    "href": "learning-resources-tools.html",
    "title": "Learning Resources - Tools",
    "section": "",
    "text": "A collection of self-guided learning resources for modern software and data tools.\n\nMODERN SCIENCE NOTEBOOK 101\n\n\nGit / GitHub\nIntroduction to GitHub\nGithub Flow\nBest Practices Example from Utrecht University\nCollaborating on GitHub\nGitHub Skills Course\n\n\nCharts and Diagrams\nMermaid"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]